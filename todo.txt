- redesign
  + events inside persistence
  - should change convention from data.item to data.item_id
  - make key controls configurable
    - keystroke editor
  - redo autogrow to act more like omnifocus

- persistence
  + localStorage
    - invalidate redo history
  + cookies?
  - gears
  - flashStorage
  - html page
  - url/hash
  - server-side (premium?)

- reliability
  - test test :B

- todo_item functionality
  - check off tasks
  - clean up button
  - show/hide finished tasks

- publicity
  - post on my blog
  - make an icon on my website

- other useful commands 
  - Group -- how would I implement this in text mode, adopt siblings?
  - If delete_reparent is useful, find a way to undo it gracefully.  It's so destructive!
  - move to next/previous parent

- silly ideas
  - ncurses client
  - omnifocus import

One way to model undo/redo would be to not delete the events when I undo, but just remember at what event I'm currently at.  Later events can still exist, and I can walk into them to redo them.  However, I should keep an index for the last relevant redo event, or I might walk into nonsensical events.  Also, I don't want to store too many nonsensical events, so I should probably clear those somehow...

Persistence button with gears.  Maybe a simple cookie-based store too.

Perhaps have a 'force sync' button to sync to the web

Refactor key controls to a common pattern: select and return the function, and if one is chosen, stop events.

this autogrow library stinks: it's ignoring my options, and it only grows every few miliseconds.  Why not check on keystrokes?  You'd need to keep it from over-animating, but still, shouldn't be too hard to do with this for reference.  I want it to act differently anyway: I don't want it to leave extra space for writing!  It should wrap tightly.

Dude, I could totally make an ncurses client for this :P

make an omnifocus merging tool